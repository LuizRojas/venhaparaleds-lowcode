# .github/workflows/main.yml
name: CI/CD com SonarQube e Testes

on:
  push:
    branches:
      - main # Dispara o workflow em push para a branch 'main'
  pull_request:
    branches:
      - main # Dispara o workflow em Pull Request para a branch 'main'

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest # O runner que executará o job

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4 # Faz o checkout do seu repositório
        with:
          # Necessário para que o SonarScanner analise o histórico do git
          fetch-depth: 0

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Use a mesma versão do Python do seu Dockerfile

      - name: Instalar Dependências
        run: |
          python -m pip install --upgrade pip
          # Instala as dependências do seu requirements.txt
          pip install -r api_rest/requirements.txt
          # Instala o SonarScanner CLI (necessário para a análise)
          # Se 'sonarscanner' já estiver no requirements.txt, esta linha é redundante mas não causa problema.
          # pip install sonarscanner 

      - name: Executar Testes com Pytest e Cobertura
        run: |
          # Garante que o diretório da aplicação está no PYTHONPATH
          # $GITHUB_WORKSPACE é a raiz do seu repositório no runner
          export PYTHONPATH=$GITHUB_WORKSPACE/api_rest
          # Executa os testes e gera relatórios de cobertura em XML (para SonarQube)
          # O comando 'pytest api_rest/tests/' diz ao pytest para procurar os testes
          # dentro da pasta 'tests' que está dentro de 'api_rest'.
          pytest api_rest/tests/ --cov=api_rest.app --cov-report=xml:coverage.xml

      - name: Análise SonarQube
        env:
          # Token de autenticação do SonarQube (armazenado como GitHub Secret)
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # URL do seu servidor SonarQube (armazenado como GitHub Secret)
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Executa o SonarScanner CLI
          # -Dsonar.projectKey: Chave única para seu projeto no SonarQube
          # -Dsonar.sources: Diretório do seu código-fonte a ser analisado
          # -Dsonar.python.coverage.reportPaths: Caminho para o relatório de cobertura gerado pelo pytest-cov
          # -Dsonar.qualitygate.wait: Opcional, faz o workflow esperar o resultado do Quality Gate do SonarQube
          sonar-scanner \
            -Dsonar.projectKey=appsmith-leds-api \
            -Dsonar.sources=api_rest \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.qualitygate.wait=true
